FROM brew.registry.redhat.io/rh-osbs/openshift-golang-builder:rhel_8_golang_1.22 as builder

WORKDIR /opt/app-root/src
USER root

COPY opentelemetry-operator .
# this directory is checked by ecosystem-cert-preflight-checks task in Konflux
COPY opentelemetry-operator/LICENSE /licenses/

RUN  export VERSION_PKG="github.com/open-telemetry/opentelemetry-operator/internal/version" && \
     export BUILD_DATE=`date -u +'%Y-%m-%dT%H:%M:%SZ'` && echo $BUILD_DATE && \
     export GIT_LATEST_TAG_AND_SHA=`git describe --tags | sed 's/^v//'` && echo $GIT_LATEST_TAG_AND_SHA && \
     export OTELCOL_VERSION=`grep -v '\#' versions.txt | grep opentelemetry-collector | awk -F= '{print $2}'` && echo $OTELCOL_VERSION && \
     export TARGETALLOCATOR_VERSION=`grep -v '\#' versions.txt | grep targetallocator | awk -F= '{print $2}'` && echo $TARGETALLOCATOR_VERSION && \
     export OPERATOR_OPAMP_BRIDGE_VERSION=`grep -v '\#' versions.txt | grep operator-opamp-bridge | awk -F= '{print $2}'` && echo $OPERATOR_OPAMP_BRIDGE_VERSION && \
     export AUTO_INSTRUMENTATION_JAVA_VERSION=`grep -v '\#' versions.txt | grep autoinstrumentation-java | awk -F= '{print $2}'`  && echo $AUTO_INSTRUMENTATION_JAVA_VERSION && \
     export AUTO_INSTRUMENTATION_NODEJS_VERSION=`grep -v '\#' versions.txt | grep autoinstrumentation-nodejs | awk -F= '{print $2}'`  && echo $AUTO_INSTRUMENTATION_NODEJS_VERSION && \
     export AUTO_INSTRUMENTATION_PYTHON_VERSION=`grep -v '\#' versions.txt | grep autoinstrumentation-python | awk -F= '{print $2}'`  && echo $AUTO_INSTRUMENTATION_PYTHON_VERSION && \
     export AUTO_INSTRUMENTATION_DOTNET_VERSION=`grep -v '\#' versions.txt | grep autoinstrumentation-dotnet | awk -F= '{print $2}'`  && echo $AUTO_INSTRUMENTATION_DOTNET_VERSION && \
     export AUTO_INSTRUMENTATION_GO_VERSION=`grep -v '\#' versions.txt | grep autoinstrumentation-go | awk -F= '{print $2}'`  && echo $AUTO_INSTRUMENTATION_GO_VERSION && \
     export AUTO_INSTRUMENTATION_APACHE_HTTPD_VERSION=`grep -v '\#' versions.txt | grep autoinstrumentation-apache-httpd | awk -F= '{print $2}'`  && echo $AUTO_INSTRUMENTATION_APACHE_HTTPD_VERSION && \
     export AUTO_INSTRUMENTATION_NGINX_VERSION=`grep -v '\#' versions.txt | grep autoinstrumentation-nginx | awk -F= '{print $2}'`  && echo $AUTO_INSTRUMENTATION_NGINX_VERSION && \
     CGO_ENABLED=1 GOEXPERIMENT=strictfipsruntime go build -mod=mod -tags strictfipsruntime -o ./opentelemetry-operator -trimpath -ldflags "-s -w -X ${VERSION_PKG}.version=${GIT_LATEST_TAG_AND_SHA} -X ${VERSION_PKG}.buildDate=${BUILD_DATE} \
              -X ${VERSION_PKG}.otelCol=${OTELCOL_VERSION} \
              -X ${VERSION_PKG}.targetAllocator=${TARGETALLOCATOR_VERSION} \
              -X ${VERSION_PKG}.operatorOpAMPBridge=${OPERATOR_OPAMP_BRIDGE_VERSION} \
              -X ${VERSION_PKG}.autoInstrumentationJava=${AUTO_INSTRUMENTATION_JAVA_VERSION} \
              -X ${VERSION_PKG}.autoInstrumentationNodeJS=${AUTO_INSTRUMENTATION_NODEJS_VERSION} \
              -X ${VERSION_PKG}.autoInstrumentationPython=${AUTO_INSTRUMENTATION_PYTHON_VERSION} \
              -X ${VERSION_PKG}.autoInstrumentationDotNet=${AUTO_INSTRUMENTATION_DOTNET_VERSION} \
              -X ${VERSION_PKG}.autoInstrumentationGo=${AUTO_INSTRUMENTATION_GO_VERSION} \
              -X ${VERSION_PKG}.autoInstrumentationApacheHttpd=${AUTO_INSTRUMENTATION_APACHE_HTTPD_VERSION} \
              -X ${VERSION_PKG}.autoInstrumentationNginx=${AUTO_INSTRUMENTATION_NGINX_VERSION}"

FROM registry.redhat.io/ubi8/ubi-minimal@sha256:7583ca0ea52001562bd81a961da3f75222209e6192e4e413ee226cff97dbd48c
WORKDIR /

RUN microdnf update -y && rm -rf /var/cache/yum && \
    microdnf install openssl -y && \
    microdnf clean all

RUN mkdir /licenses
COPY opentelemetry-operator/LICENSE /licenses/.
COPY --from=builder /opt/app-root/src/opentelemetry-operator /usr/bin/opentelemetry-operator

ARG USER_UID=1001
USER ${USER_UID}
ENTRYPOINT ["/usr/bin/opentelemetry-operator"]

LABEL com.redhat.component="opentelemetry-operator-container" \
      name="rhosdt/opentelemetry-rhel8-operator" \
      summary="OpenTelemetry Operator" \
      description="Operator for the OpenTelemetry collector" \
      io.k8s.description="Operator for the OpenTelemetry operator." \
      io.openshift.expose-services="" \
      io.openshift.tags="tracing" \
      io.k8s.display-name="OpenTelemetry Operator"